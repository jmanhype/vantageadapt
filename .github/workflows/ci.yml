name: CI

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.12]

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov
        
    - name: Run tests
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        MEM0_API_KEY: ${{ secrets.MEM0_API_KEY }}
      run: |
        pytest tests/ --cov=src/ --cov-report=xml
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        fail_ci_if_error: true

  version-check:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Check version format
      run: |
        TAG=${GITHUB_REF#refs/tags/}
        if ! [[ $TAG =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-((alpha|beta|rc)\.[0-9]+)|)$ ]]; then
          echo "Invalid version format: $TAG"
          echo "Version must follow format: v1.2.3 or v1.2.3-beta.1"
          exit 1
        fi
        
    - name: Verify CHANGELOG.md update
      run: |
        TAG=${GITHUB_REF#refs/tags/}
        if ! grep -q "\[$TAG\]" CHANGELOG.md; then
          echo "CHANGELOG.md must be updated with version $TAG"
          exit 1
        fi
        
    - name: Create Release
      if: success()
      uses: softprops/action-gh-release@v1
      with:
        body_path: CHANGELOG.md
        draft: false
        prerelease: ${{ contains(github.ref, '-alpha.') || contains(github.ref, '-beta.') || contains(github.ref, '-rc.') }} 